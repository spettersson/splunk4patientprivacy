name: First Seen Access
type: Anomaly-triggering
description:
  This detection identifies employees who recently accessed a patient medical record
  without having any prior history of access in the last 6 months.
detection_ID: 'd1'
prerequisites:
- data_sources: 
    Events from any Electronic Medical Record (EMR) application that records access to patient medical records.
- tags:
    emraudit (explanation: a tag that references all events, despite what EMR application it originates from, that falls into the category of journal records)
- indexes: 
    anomaly_collection (explanation: an index where identified anomalies are stored as individual events.)
- lookups: 
    baseline_historical_activity (a lookup file that stores the last recorded interaction between employees and patients in a key-value format.)
- fields: 
    careworker_ID (a unique identifier for the employee that is consistent across all EMR applications, for example HSA-id or government-issued id. )
    patient_ID (a unique identifier for the patient that is consistent across all EMR applications.)
- searches: 
    search_1
    search_2
    search_3

how_to_implement:
  1. fields:
      - Make sure each individual journal system has, at minimum, following fields: _time, staff_ID, patient_ID

  2. indexes:
      - Make sure that an index with the name 'alert_collection' exist.
      - The retention for this index should be configured according to your requirements/needs. 
      
  4. lookups:
      - Download and install Splunk App for Lookup File Editing (https://splunkbase.splunk.com/app/1724).
      - Import the lookup baseline_historical_activity.csv 
        (https://github.com/spettersson/splunk4patientprivacy/blob/cc1ba2159eadc166eee0226790126da16d50f608/lookups/baseline_historical_baseline.csv).
        
  5. searches:
      - Create and enable 'search_1', followed by 'search_2', followed by 'search_3'.

search_1:
  title: Historical access baseline
  description: Establishes a baseline of historical access for the past 6 months.
  search: 
    `audit_` earliest=-6mon latest=now
    | fields _time, staff_ID, patient_ID
    | stats latest(_time) as last_activity by staff_ID, patient_ID
    | table staff_ID, patient_ID, last_activity
    | outputlookup baseline_historical_activity
  earliest_time: Leave empty (defined in search: earliest=-6mon).
  latest_time: Leave empty (defined in search: latest=now).
  schedule: N/A (Run manually before enabling search 2 and search 3).

search_2:
  title: Historical activity updates
  description: Incrementally updates the historical activity lookup on a daily basis.
  search: 
    | inputlookup baseline_historical_activity
    | append [
        tag=journal earliest=-1d@d latest=@d
        | fields _time, staff_ID, patient_ID
        | stats latest(_time) as last_activity by staff_ID, patient_ID
        | table staff_ID, patient_ID, last_activity
      ]
    | stats max(last_activity) as last_activity by staff_ID, patient_ID
    | table staff_ID, patient_ID, last_activity
    | outputlookup baseline_historical_activity
  earliest_time: Leave empty (defined in search: earliest=-1d@d).
  latest_time: Leave empty (defined in search: latest=@d).
  schedule: 
    cron_expression: "0 0 * * *"  # Runs daily at midnight.

search_3:
  title: First seen activity detection
  description: Identifies employees who interacted with a patient within the past 10-minute window 
    (accounting for a 2-minute latency) but had no prior activity with that patient in the last 6 months. 
    If matched, an anomaly is triggered and stored as an event in the anomaly_collection index.
  search: 
    tag=journal earliest=-12min@min latest=-2min@min
    | fields _time, staff_ID, patient_ID, care_provider_ID, care_unit_ID
    | stats earliest(_time) as last_activity values(care_provider_ID) as care_provider_ID values(care_unit_ID) as care_unit_ID 
    by staff_ID, patient_ID
    | lookup baseline_historical_activity staff_ID patient_ID OUTPUT last_activity AS baseline_last_activity
    | eval time_since_last_activity = now() - baseline_last_activity
    | eval anomaly = if(isnull(baseline_last_activity) OR time_since_last_activity >= 14515200 , "1", "0")
    | where anomaly = "1"
    | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(last_activity) AS last_activity 
    | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(baseline_last_activity) AS baseline_last_activity 
    | eval anomaly_title = "First time activity"
    | eval anomaly_description = "Employee ID ".staff_ID." engaged in activity related to Patient ID ".patient_ID." on ".last_activity.". The last recorded activity prior to that was on ".baseline_last_activity."."
    | eval use_case_ID="uc1"
    | eval risk_score = "20"  # Adjust the risk score (scale: 0-100) based on anomaly severity.
    | addinfo
    | eval anomaly_ID = md5(staff_ID.patient_ID.last_interaction.sid.info_search_time)
    | fields use_case_ID, anomaly_ID, anomaly_title, anomaly_description, risk_score, care_provider_ID, care_unit_ID, staff_ID, patient_ID, last_activity, baseline_last_activity, info_search_time, info_min_time, info_max_time
    | collect index=anomaly_collection sourcetype=patientprivacy_anomaly addinfo=false
  earliest_time: Leave empty (defined in search: earliest=-12min@min).
  latest_time: Leave empty (defined in search: latest=-2min@min).
  schedule: 
    cron_expression: "*/10 * * * *" # Runs every 10 minutes, 24/7.
