name: Care Relationship Indicators
type: Observation Triggering
description: This detection looks for specific signals that (may) indicate the existence of a legitimate care relationship between 
          medical staff and patients. It can provide valuable input to the decision whether a group of observations should trigger an alert or not, and also 
          be valuable when investigating alerts, helping to distinguish between acceptable and unacceptable behaviour. 
          For each match, an observation is created and stored as an event in index=observation_collection.
detection_ID: obs5
author: Simon Pettersson, Splunk
prerequisites:
- data sources:
          EHR audit events from any source system
- tags:
          auditevent (explanation: identifies all EHR audit events, regardless of source system)
          patientrecord (explanation: identifies all EHR audit events associated with patient records access, regardless of source system)
          prescription (explanation: identifies EHR audit events where a users prescribes or orders medication for a patient, regardless of source system) 
          diagnosis (explanation: identifies EHR audit events where users adds/updates/removes a diagnosis for a patient, regardless of source system) 
          encounter (explanation: identifies EHR audit events tied to patient encounters, regardless of source system) 
- indexes: 
          observation (explanation: where identified observations are stored as individual events)
- fields (note: some fields will be present in the EHR audit events itself, others will be present by enriching the events with information from other sources): 
	user_id (explanation: unique identifier for the user taking an active role in the event or activity that is logged; mapping to FHIR element id AuditEvent.agent.who.identifier)
	user_name (explanation: human-readable name of the user taking an active role in the event or activity that is logged; mapping to FHIR element id AuditEvent.agent.who.display)
	user_role (explanation: describes the userâ€™s role or function (e.g., physician, nurse, admin), indicating their competency in the context of the event; mapping to FHIR element id AuditEvent.agent.role)
	patient_id (explanation: unique identifier for the patient that is the subject of the data accessed during the activity; mapping to FHIR element id AuditEvent.patient.reference)
	type (explanation: general classification of the event that occurred; mapping to FHIR element id AuditEvent.category)
	subtype (explanation: more specific detail about the event; mapping to FHIR element id AuditEvent.code)
	action (explanation: the type of action performed during the event that generated the audit (e.g., create, read, update, delete); mapping to FHIR element id AuditEvent.action)
	object (explanation: human-readable name of the object associated with the action performed; mapping to FHIR element id AuditEvent.entity.what.display)
	object_id (explanation: unique identifier for the object associated with the action performed; mapping to FHIR element id AuditEvent.entity.what.reference)
	object_category (explanation: categorization of the object associated with the action performed; mapping to FHIR element id AuditEvent.entity.type)
- searches: 
          search_1
how_to_implement:
search_1: 
- title: 
- description: 
- search: tag=auditevent tag=patientrecord (tag=prescription OR tag=diagnosis OR tag=encounter) earliest=-12min@min latest=-2min@min
          | fields _time, user_id, patient_id, care_provider_ID, action, target_type, clinical_event_type
          | stats count by user_id, patient_id, care_provider_ID, action, target_type, clinical_event_type
          | addinfo
          | eval detection_ID = "obs5"
          | eval detection_title = "Care Relationship Indicators"
          | eval detection_description = "Looks for specific signals that may indicate the existence of a legitimate care relationship between users and patients."
          | eval observation_ID = md5(user_id.patient_id.target_type.clinical_event_type.sid.info_search_time)
          | eval observation_message = "User=".user_id." with role=".user_role." performed action='".action."' on target_type '".target_type."' and the clinical_event_type '".clinical_event_type."'."
          | eval observation_risk_score = 0
          | fields detection_*, observation_*, info_*, user_id, patient_id, care_provider_ID, action, target_Type, clinical_event_type
          | collect index=observation addinfo=false
- earliest_time: Leave empty (defined in search via earliest option).
- latest_time: Leave empty (defined in search via latest option).
- cron_schedule: */10 * * * *
