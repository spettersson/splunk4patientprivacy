name: First Seen Access
type: Observation Triggering
description: This detection looks for staff members who recently accessed a patient medical record
          without having any prior history with that patient in the last 6 months.
detection_id: obs1
author: Simon Pettersson, Splunk
prerequisites:
- data_sources: 
          EHR audit events from any source system
- tags:
          auditevent (=identifies all EHR audit events, regardless of source system)
          patientrecord (=identifies all EHR audit events associated with patient records access, regardless of source system)
- indexes: 
          observation (=an index where identified observations are stored as individual events)
- lookups: 
          baseline_historical_access (=a lookup file that stores the last seen access between employees and patients)
- fields: 
 	action (=type of action performed during the event - e.g., create, read, update, delete)
  	user_id (=identifier of the user who performed the action)
 	patient_id (=identifier of the patient whose medical record the action was performed on)
   	type (=high-level event category)
    	subtype (=more granular event description)
   	object (=human-readable name of what specifically was accessed)
    	object_changes (=attributes and values that were added, updated, or removed on the object)
  	care_provider_id (=identifier of the care provider associated with the event)
- searches: 
          search_1
          search_2
          search_3
how_to_implement:
  1. fields:
      - Make sure each individual EHR system has, at minimum, the following fields: user_id, patient_id
  2. indexes:
      - Make sure that an index with the name 'observation' exist.
      - The retention for this index should be configured according to your requirements/needs. 
  4. lookups:
      - Download and install Splunk App for Lookup File Editing (https://splunkbase.splunk.com/app/1724).
      - Create a KVstore lookup with the name 'baseline_historical_access' with the fields: user_id, patient_id, last_access. 
  5. searches:
      - Create and enable 'search_1', followed by 'search_2', followed by 'search_3'.     
search_1:
- title: Baseline - Backfill of Historical Access 
- description: Establishes a baseline of historical access for the past 6 months.
- search: tag=auditevent tag=patientrecord earliest=-6mon latest=now
          | fields _time, user_id, patient_id
          | stats latest(_time) as last_access by user_id, patient_id
          | table user_id, patient_id, last_access
          | outputlookup baseline_historical_access
- earliest_time: Leave empty (defined in search via earliest option).
- latest_time: Leave empty (defined in search via latest option).
- cron_schedule: N/A (Run manually before enabling search 2 and search 3).
search_2:
- title: Baseline - Incremental Update of Historical Access
- description: Incrementally updates the historical access lookup on a daily basis.
- search: | inputlookup baseline_historical_access
          | append [
          tag=auditevent tag=patientrecord earliest=-1d@d latest=@d
          | fields _time, user_id, patient_id
          | stats latest(_time) as last_access by user_id, patient_id
          | fields user_id, patient_id, last_access
          ]
          | stats max(last_access) as last_access by user_id, patient_id
          | fields user_id, patient_id, last_access
          | outputlookup baseline_historical_access
- earliest_time: Leave empty (defined in search via earliest option).
- latest_time: Leave empty (defined in search via latest option).
- cron_schedule: 0 0 * * *  # Runs daily at midnight.
search_3:
- title: Observation - First Seen Access
- description: Identifies staff members who accessed a patient medical record within the past 10-minute window 
          (accounting for a 2-minute latency) but has not accessed anything associated with that patient in the last 6 months. 
          For each match, an observation is triggered and stored as an event in the observation index.
- search: tag=auditevent tag=patientrecord earliest=-12min@min latest=-2min@min
          | fields _time, user_id, patient_id, care_provider_id
          | stats earliest(_time) as last_access by user_id, patient_id, care_provider_id
          | lookup baseline_historical_access user_id patient_id OUTPUT last_access AS historical_last_access
          | eval time_since_last_access = now() - historical_last_access
          | eval observation = if(isnull(historical_last_access) OR time_since_last_access >= 14515200 , "1", "0")
          | where observation = "1"
          | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(last_access) AS last_access 
          | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(historical_last_access) AS historical_last_access 
          | addinfo
          | eval detection_title = "First Seen Access"
          | eval detection_description = ""
          | eval detection_id="obs1"
          | eval observation_id = md5(user_id.patient_id.last_interaction.sid.info_search_time
          | eval observation_message = "User ".user_id." has accessed a patient medical record associated to patient=".patient_id." on ".last_access.". The last recorded access prior to that was on ".historical_last_access."."
          | eval observation_risk_score = "20"
          | fields detection_*, observation_*, info_*, care_*, user_id, patient_id, last_access, historical_last_access
          | collect index=observation sourcetype=observation addinfo=false
- earliest_time: Leave empty (defined in search via earliest option).
- latest_time: Leave empty (defined in search via latest option).
- cron_schedule: */10 * * * * # Runs every 10 minutes, 24/7.
