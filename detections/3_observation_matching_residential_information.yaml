name: Matching Residential Information
type: Observation Triggering
description: This detection looks for staff members who access patient medical records where there is a potential residential link between the 
        staff member and the patient. A match on residential address, street name, or postal code may indicate a personal relationship.
        For each match, an observation is created and stored as an event in index=observation_collection.
detection_ID: obs3
author: Simon Pettersson, Splunk
prerequisites: 
- data sources:
        EHR audit events from any source
        Staff member and patient residential information
- tags:
          auditevent (=identifies all EHR audit events, regardless of source system)
          patientrecord (=identifies all EHR audit events associated with patient records access, regardless of source system)
- indexes: 
        observation (=where identified observations are stored as individual events)
- lookups: 
        patientpii_lookup
        staffpii_lookup
- fields: 
        user_id
        staff_residential_street_name
        staff_residential_street_number
        staff_residential_postal_code
          
        patient_id
        patient_residential_street_name
        patient_residential_street_number
        patient_residential_postal_code

        careprovider_id
- searches: 
          search_1
how_to_implement:
search_1:
- tile: 
- description: 
- search: tag=auditevent tag=patientrecord earliest=-12min@min latest=-2min@min
        | fields _time, user_id, patient_id, careprovider_id
        | stats count by user_id, patient_id, careprovider_id
        | lookup patientpii_lookup patient_id OUTPUT patient_residential_street_name, patient_residential_street_number, patient_residential_postal_code
        | lookup staffpii_lookup user_id OUTPUT staff_residential_street_name, staff_residential_street_number, staff_residential_postal_code
        | eval staff_residential_address_and_postal_code = staff_residential_street_name + staff_residential_street_number + staff_postal_code
        | eval patient_residential_address_and_postal_code = patient_residential_street_name + patient_residential_street_number + patient_postal_code
        | eval patient_residential_street_name_and_postal_code = patient_residential_street_name + patient_postal_code
        | eval staff_residential_street_name_and_postal_code = staff_residential_street_name + staff_postal_code
        | eval matching_address = if(staff_residential_address_and_postal_code == patient_residential_address_and_postal_code, "true", "false")
        | eval matching_street_name = if(staff_residential_street_name_and_postal_code  == patient_residential_street_name_and_postal_code , "true", "false")
        | eval matching_postal_code = if(staff_residential_postal_code == patient_residential_postal_code, "true", "false")
        | where matching_address="true" OR matching_street_name="true" OR matching_postal_code="true"
        | eval observation_risk_factor = case(
        matching_address == "true", 10, 
        matching_street_name == "true", 3,
        matching_postal_code == "true", 1
        )			
        | addinfo
        | eval detection_ID = "obs3"
        | eval detection_title = "matching residential information"
        | eval detection_description = "looks for employees who access patient medical records where there is a potential residential link between the staff member and the patient. A match on residential address, street name, or postal code may indicate a personal relationship."
        | eval observation_ID = md5(user_id.patient_id.sid.info_search_time)
        | eval observation_message = "User=".user_id." accessed a patient medical record associated to patient=".patient_id." during hour ".hourOfDay." This is unusual for the staff member during this hour of the day."
        | eval observation_risk_score = 10
        | eval observation_risk_score = observation_risk_factor * observation_risk_score
        | fields user_*, patient_*, matching_*, detection_*, observation_*, careprovider_id
        | collect index=observation sourcetype=observation add_info=false
- earliest_time: Leave empty (defined in search via earliest option).
- latest_time: Leave empty (defined in search via latest option).
- cron_schedule: */10 * * * * 
        
        
