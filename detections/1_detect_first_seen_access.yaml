name: First Seen Access
id: b04be6e5-2002-4349-8742-52111635b8f5
version: 1
author: Simon Pettersson, Splunk
type: Anomaly
status: experimental
description: Identifies staff members who accessed a patient medical record within the past 10-minute window 
          (accounting for a 2-minute latency) but has not accessed anything associated with that patient 
          in the last 6 months. This could indicate that there is no existing care relationship.
data_source: EHR audit data
search: tag=auditevent tag=patientrecord
          | fields _time, user_id, patient_id, care_provider_id
          | stats earliest(_time) as last_access by user_id, patient_id, care_provider_id
          | lookup baseline_historical_access user_id patient_id OUTPUT last_access AS historical_last_access
          | eval time_since_last_access = now() - historical_last_access
          | eval observation = if(isnull(historical_last_access) OR time_since_last_access >= 14515200 , "1", "0")
          | where observation = "1"
          | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(last_access) AS last_access 
          | convert timeformat="%Y-%m-%d %H:%M:%S" ctime(historical_last_access) AS historical_last_access 
          | eval observation_message = "User ".user_id." has accessed a patient medical record associated to patient=".patient_id." on ".last_access.". The last recorded access prior to that was on ".historical_last_access."."

          | eval observation_risk_score = "20"
          | fields detection_*, observation_*, info_*, care_*, user_id, patient_id, last_access, historical_last_access
scheduling:
  cron_schedule: '*/10 * * * *'
  earliest_time: -12min@min
  latest_time: -2min@min
how_to_implement: This search requires you to ingest EHR audit data that has the tags auditevent and patientrecord. 
          The data must have the fields user_id and patient_id, wheras care_provider_id is recommended. Moreover, 

          
                              - data_sources: 
                                        EHR audit events from any source system
                              - tags:
                                        auditevent (=identifies all EHR audit events, regardless of source system)
                                        patientrecord (=identifies all EHR audit events associated with patient records access, regardless of source system)
                              - indexes: 
                                        observation (=an index where identified observations are stored as individual events)
                              - lookups: 
                                        baseline_historical_access (=a lookup file that stores the last seen access between employees and patients)
                              - fields: 
                                        action (=type of action performed during the event - e.g., create, read, update, delete)
                                	user_id (=identifier of the user who performed the action)
                               	patient_id (=identifier of the patient whose medical record the action was performed on)
                                 	type (=high-level event category)
                                  	subtype (=more granular event description)
                                 	object (=human-readable name of what specifically was accessed)
                                  	object_changes (=attributes and values that were added, updated, or removed on the object)
                                	care_provider_id (=identifier of the care provider associated with the event)
                              - searches: 
                                        search_1
                                        search_2
                                        search_3
                              how_to_implement:
                                1. fields:
                                    - Make sure each individual EHR system has, at minimum, the following fields: user_id, patient_id
                                2. indexes:
                                    - Make sure that an index with the name 'observation' exist.
                                    - The retention for this index should be configured according to your requirements/needs. 
                                4. lookups:
                                    - Download and install Splunk App for Lookup File Editing (https://splunkbase.splunk.com/app/1724).
                                    - Create a KVstore lookup with the name 'baseline_historical_access' with the fields: user_id, patient_id, last_access. 
                                5. searches:
                                    - Create and enable 'search_1', followed by 'search_2', followed by 'search_3'.
